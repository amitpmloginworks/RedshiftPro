{
  "_args": [
    [
      {
        "raw": "sequential-promise-map@^1.0.0",
        "scope": null,
        "escapedName": "sequential-promise-map",
        "name": "sequential-promise-map",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "F:\\RedShift\\node_modules\\claudia"
    ]
  ],
  "_from": "sequential-promise-map@^1.0.0",
  "_hasShrinkwrap": false,
  "_id": "sequential-promise-map@1.1.0",
  "_location": "/sequential-promise-map",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sequential-promise-map_1.1.0_1538300382315_0.5729838750503948"
  },
  "_npmUser": {
    "name": "gojko",
    "email": "gojko@gojko.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sequential-promise-map@^1.0.0",
    "scope": null,
    "escapedName": "sequential-promise-map",
    "name": "sequential-promise-map",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/claudia"
  ],
  "_resolved": "https://registry.npmjs.org/sequential-promise-map/-/sequential-promise-map-1.1.0.tgz",
  "_shasum": "a883e18fa5b907be0af55f1c3ed46b7365ffe7e0",
  "_shrinkwrap": null,
  "_spec": "sequential-promise-map@^1.0.0",
  "_where": "F:\\RedShift\\node_modules\\claudia",
  "author": {
    "name": "Gojko Adzic",
    "email": "gojko@neuri.co.uk"
  },
  "bugs": {
    "url": "https://github.com/gojko/sequential-promise-map/issues"
  },
  "dependencies": {},
  "description": "A simple sequential version of Promise.map",
  "devDependencies": {
    "jasmine": "^2.6.0",
    "jasmine-spec-reporter": "^4.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-9x1bM5GJ7rGYUzWR/tuNXeP9SKNsculTWE+O9hYUttdrFAP+MhkVwR3MEayw9KuTEOvIUW2dCbueeKaMoY+JUw==",
    "shasum": "a883e18fa5b907be0af55f1c3ed46b7365ffe7e0",
    "tarball": "https://registry.npmjs.org/sequential-promise-map/-/sequential-promise-map-1.1.0.tgz",
    "fileCount": 4,
    "unpackedSize": 3751,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbsJneCRA9TVsSAnZWagAA95cP/1t8eci3JAsj0jqC9Qta\nTAyf1ZexVJgzmClizP51n0coKelLlQ2xDIISZdm4SxMFj39rVO9lvnGqcwEJ\nQBaSCJCyYH9WP5jQx8wtmQu+hUeahDtRumrfFjpDEi0A8ya/axOjfqg+g4k9\nR0wurlXph5t3vaCILew1rEDeqWicpKlq/7bFsfV1Ahw7S/glGirhIlpvcvHK\n2slCbV1dPZB0lWFroCsCtTpHSAIE1FPh5dNxeMtSosKlW0M4QD2qc+MjByCP\nuAkaCb9EEixrIBJnIZcmMJ8vwKEpwlWN1RXPCptF42PvRChPWraJhjUx/X2m\nkn1BBDRFpDuDDlJYxfCnwA5TnyRXXrdvQqvUnh27+rcK09fmoMj+o6siV7dw\ntUuvTn/hhcBvAEumzI2IPwdGjlPcxLhmuR0oi84LVbU2mUk+5zb4JS1pemW/\ncSjZ4sMEo1tjvNnxYVceZ++7j0zonOAEh/uljG0flqWfDCsc0HzQAala0gOq\nx7YC9KKwt4P6i6Zg3udaHqdqYTWHQObHBl3nHQnIPtT07CcFrsHcUtNeovrX\n8/s0sHVr+9XDuShncVMtLyxPtislltnNJ8CdYdA+yxW66Y1nkAtvxmnkHTUe\nA+kPixPoWcqmvJ+gqych5ztvMbwMMI1TZKKCypeLjkCOlvNzzD1vJco6NsYh\n6uyW\r\n=0bH5\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "src",
    "*.md"
  ],
  "gitHead": "464fff961b0b71a014f8f25003a97216e171a664",
  "homepage": "https://github.com/gojko/sequential-promise-map#readme",
  "keywords": [
    "Promise"
  ],
  "license": "MIT",
  "main": "src/sequential-promise-map.js",
  "maintainers": [
    {
      "name": "gojko",
      "email": "gojko@gojko.com"
    }
  ],
  "name": "sequential-promise-map",
  "optionalDependencies": {},
  "readme": "# sequential-promise-map\n\nA simple sequential version of `Promise.map`, useful to transform an array of values into asynchronous promises, when you need to limit parallel execution of promise generators (eg to prevent hitting external resource thresholds, or to guarantee that things need to happen in a particular sequence).\n\nThe function  has no dependencies so it will work in Node or browsers, as long as native Promises are supported.\n\n### Installation\n\n```bash\nnpm install sequential-promise-map\n```\n\n### Usage\n\n```js\nsequentialPromiseMap(arrayOfValues, promiseGenerator).then(....) \n\n```\n\nthe `promiseGenerator` parameter should be a function:\n\n```js\npromiseGenerator = function(currentElement, indexOfCurrent, originalArray) {\n  ...\n}\n```\n\nThe function will resolve will contain an array of Promise results, in the same order as the arguments, or reject with the first rejection.\n\n\n### Example\n\n```js\nconst sequentialPromiseMap = require('sequential-promise-map');\n\nconst fruits = ['apples', 'oranges', 'grapes'];\n\nconst invert = function (name/*, index, array*/) {\n  return new Promise(resolve => {\n    resolve(name.split('').reverse().join(''));\n  });\n};\n\nsequentialPromiseMap(fruits, invert).then(results => console.log('got results', results));\n```\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gojko/sequential-promise-map.git"
  },
  "scripts": {
    "test": "node spec/support/jasmine-runner.js"
  },
  "version": "1.1.0"
}

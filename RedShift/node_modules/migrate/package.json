{
  "_args": [
    [
      {
        "raw": "migrate@^0.2.2",
        "scope": null,
        "escapedName": "migrate",
        "name": "migrate",
        "rawSpec": "^0.2.2",
        "spec": ">=0.2.2 <0.3.0",
        "type": "range"
      },
      "F:\\RedShift\\node_modules\\node-redshift"
    ]
  ],
  "_from": "migrate@>=0.2.2 <0.3.0",
  "_id": "migrate@0.2.4",
  "_inCache": true,
  "_location": "/migrate",
  "_nodeVersion": "6.11.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/migrate-0.2.4.tgz_1506190502960_0.40632325247861445"
  },
  "_npmUser": {
    "name": "wesleytodd",
    "email": "wes@wesleytodd.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "migrate@^0.2.2",
    "scope": null,
    "escapedName": "migrate",
    "name": "migrate",
    "rawSpec": "^0.2.2",
    "spec": ">=0.2.2 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/node-redshift"
  ],
  "_resolved": "https://registry.npmjs.org/migrate/-/migrate-0.2.4.tgz",
  "_shasum": "30a54dac5c269b7321cec56b2aff4cccaea6418d",
  "_shrinkwrap": null,
  "_spec": "migrate@^0.2.2",
  "_where": "F:\\RedShift\\node_modules\\node-redshift",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "bin": {
    "migrate": "./bin/migrate"
  },
  "bugs": {
    "url": "https://github.com/visionmedia/node-migrate/issues"
  },
  "dependencies": {
    "dateformat": "^1.0.12"
  },
  "description": "Abstract migration framework for node",
  "devDependencies": {
    "mocha": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "30a54dac5c269b7321cec56b2aff4cccaea6418d",
    "tarball": "https://registry.npmjs.org/migrate/-/migrate-0.2.4.tgz"
  },
  "engines": {
    "node": ">= 0.4.x"
  },
  "gitHead": "61adf2cd7b1189a4d948fa223731a4a04f44d25c",
  "homepage": "https://github.com/visionmedia/node-migrate#readme",
  "keywords": [
    "migrate",
    "migrations"
  ],
  "license": "MIT",
  "main": "index",
  "maintainers": [
    {
      "name": "wesleytodd",
      "email": "wes@wesleytodd.com"
    },
    {
      "name": "linusu",
      "email": "linus@folkdatorn.se"
    },
    {
      "name": "joaosa",
      "email": "sousa.andrade.joao@gmail.com"
    },
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "name": "migrate",
  "optionalDependencies": {},
  "readme": "# migrate\n\n  Abstract migration framework for node\n\n*NOTE:* A large refactor is underway for the next major version of this package.  Check out the `1.x` pull request tracking this work, or to explicitly opt in, install the `next` tag (`npm install migrate@next`).\n\n## Installation\n\n    $ npm install migrate\n\n## Usage\n\n```\nUsage: migrate [options] [command]\n\nOptions:\n\n   -c, --chdir <path>      change the working directory\n   --state-file <path>     set path to state file (migrations/.migrate)\n   --template-file <path>  set path to template file to use for new migrations\n   --date-format <format>  set a date format to use for new migration filenames\n\nCommands:\n\n   down   [name]    migrate down till given migration\n   up     [name]    migrate up till given migration (the default command)\n   create [title]   create a new migration file with optional [title]\n\n```\n\n## Programmatic usage\n\n```javascript\nvar migrate = require('migrate');\nvar set = migrate.load('migration/.migrate', 'migration');\n\nset.up(function (err) {\n  if (err) throw err;\n\n  console.log('Migration completed');\n});\n```\n\n## Creating Migrations\n\nTo create a migration, execute `migrate create` with an optional title. `node-migrate` will create a node module within `./migrations/` which contains the following two exports:\n\n    exports.up = function(next){\n      next();\n    };\n\n    exports.down = function(next){\n      next();\n    };\n\nAll you have to do is populate these, invoking `next()` when complete, and you are ready to migrate!\n\nFor example:\n\n    $ migrate create add-pets\n    $ migrate create add-owners\n\nThe first call creates `./migrations/{timestamp in milliseconds}-add-pets.js`, which we can populate:\n\n      var db = require('./db');\n\n      exports.up = function(next){\n        db.rpush('pets', 'tobi');\n        db.rpush('pets', 'loki');\n        db.rpush('pets', 'jane', next);\n      };\n\n      exports.down = function(next){\n        db.rpop('pets');\n        db.rpop('pets');\n        db.rpop('pets', next);\n      };\n\nThe second creates `./migrations/{timestamp in milliseconds}-add-owners.js`, which we can populate:\n\n      var db = require('./db');\n\n      exports.up = function(next){\n        db.rpush('owners', 'taylor');\n        db.rpush('owners', 'tj', next);\n      };\n\n      exports.down = function(next){\n        db.rpop('owners');\n        db.rpop('owners', next);\n      };\n\n## Running Migrations\n\nWhen first running the migrations, all will be executed in sequence.\n\n    $ migrate\n    up : migrations/1316027432511-add-pets.js\n    up : migrations/1316027432512-add-jane.js\n    up : migrations/1316027432575-add-owners.js\n    up : migrations/1316027433425-coolest-pet.js\n    migration : complete\n\nSubsequent attempts will simply output \"complete\", as they have already been executed in this machine. `node-migrate` knows this because it stores the current state in `./migrations/.migrate` which is typically a file that SCMs like GIT should ignore.\n\n    $ migrate\n    migration : complete\n\nIf we were to create another migration using `migrate create`, and then execute migrations again, we would execute only those not previously executed:\n\n    $ migrate\n    up : migrates/1316027433455-coolest-owner.js\n\nYou can also run migrations incrementally by specifying a migration.\n\n    $ migrate up 1316027433425-coolest-pet.js\n    up : migrations/1316027432511-add-pets.js\n    up : migrations/1316027432512-add-jane.js\n    up : migrations/1316027432575-add-owners.js\n    up : migrations/1316027433425-coolest-pet.js\n    migration : complete\n\nThis will run up-migrations upto (and including) `1316027433425-coolest-pet.js`. Similarly you can run down-migrations upto (and including) a specific migration, instead of migrating all the way down.\n\n    $ migrate down 1316027432512-add-jane.js\n    down : migrations/1316027432575-add-owners.js\n    down : migrations/1316027432512-add-jane.js\n    migration : complete\n\n## API\n\n### `migrate.load(stateFile, migrationsDirectory)`\n\nReturns a `Set` populated with migration scripts from the `migrationsDirectory`\nand state loaded from `stateFile`.\n\n### `Set.up([migration, ]cb)`\n\nMigrates up to the specified `migration` or, if none is specified, to the latest\nmigration. Calls the callback `cb`, possibly with an error `err`, when done.\n\n### `Set.down([migration, ]cb)`\n\nMigrates down to the specified `migration` or, if none is specified, to the\nfirst migration. Calls the callback `cb`, possibly with an error `err`, when\ndone.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/node-migrate.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.2.4"
}

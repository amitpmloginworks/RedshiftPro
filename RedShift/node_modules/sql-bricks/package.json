{
  "_args": [
    [
      {
        "raw": "sql-bricks@^1.2.3",
        "scope": null,
        "escapedName": "sql-bricks",
        "name": "sql-bricks",
        "rawSpec": "^1.2.3",
        "spec": ">=1.2.3 <2.0.0",
        "type": "range"
      },
      "F:\\RedShift\\node_modules\\node-redshift"
    ]
  ],
  "_from": "sql-bricks@>=1.2.3 <2.0.0",
  "_id": "sql-bricks@1.5.1",
  "_inCache": true,
  "_location": "/sql-bricks",
  "_nodeVersion": "0.12.13",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/sql-bricks-1.5.1.tgz_1477749944708_0.5390363656915724"
  },
  "_npmUser": {
    "name": "prust",
    "email": "peter@cornerstonenw.com"
  },
  "_npmVersion": "2.15.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sql-bricks@^1.2.3",
    "scope": null,
    "escapedName": "sql-bricks",
    "name": "sql-bricks",
    "rawSpec": "^1.2.3",
    "spec": ">=1.2.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/node-redshift"
  ],
  "_resolved": "https://registry.npmjs.org/sql-bricks/-/sql-bricks-1.5.1.tgz",
  "_shasum": "68dc6d77b21a696f4885184a031b861ea5575981",
  "_shrinkwrap": null,
  "_spec": "sql-bricks@^1.2.3",
  "_where": "F:\\RedShift\\node_modules\\node-redshift",
  "author": {
    "name": "Peter Rust",
    "email": "peter@cornerstonenw.com"
  },
  "bugs": {
    "url": "https://github.com/CSNW/sql-bricks/issues"
  },
  "dependencies": {
    "underscore": "1.4.x"
  },
  "description": "Transparent, Schemaless SQL Generation",
  "devDependencies": {
    "mocha": "1.13.x"
  },
  "directories": {},
  "dist": {
    "shasum": "68dc6d77b21a696f4885184a031b861ea5575981",
    "tarball": "http://registry.npmjs.org/sql-bricks/-/sql-bricks-1.5.1.tgz"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "d7ccbfa6bda8574143e2206cfda9a6b596ce0df7",
  "homepage": "http://csnw.github.io/sql-bricks",
  "keywords": [
    "sql",
    "generation",
    "generate",
    "query",
    "pg",
    "postgres",
    "sqlite",
    "builder",
    "select",
    "insert",
    "update",
    "delete"
  ],
  "license": "MIT",
  "main": "sql-bricks.js",
  "maintainers": [
    {
      "name": "prust",
      "email": "peter@cornerstonenw.com"
    }
  ],
  "name": "sql-bricks",
  "optionalDependencies": {},
  "readme": "# SQL Bricks.js\r\n\r\n[![Build Status](https://travis-ci.org/CSNW/sql-bricks.png?branch=master)](https://travis-ci.org/CSNW/sql-bricks)\r\n\r\nSQL Bricks.js is a transparent, schemaless library for building and composing SQL statements.\r\n\r\n- Supports all [SQL-92](http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt) clauses for select/insert/update/delete with the exception of asc/desc/collate options for `orderBy()`, see [#73](https://github.com/CSNW/sql-bricks/issues/73) (postgres extensions are at https://github.com/Suor/sql-bricks-postgres, sqlite extensions are at https://github.com/CSNW/sql-bricks-sqlite)\r\n- Over [200 tests](http://csnw.github.io/sql-bricks/browser-tests.html)\r\n- Easy-to-use, comprehensive [docs](http://csnw.github.io/sql-bricks)\r\n- Single straightforward [source file](sql-bricks.js) (~1,100 lines), easy to understand & debug\r\n\r\n\r\nComparison with popular SQL-generation libraries:\r\n\r\nlibrary         | lines | files | schema       | language     | other notes  \r\n--------------- | ----- | ----- | ------------ | --------     | --------------\r\n[Knex][1]       | 3500  |    30 | schema       | javascript   | transactions, migrations, promises, connection pooling\r\n[Squel][2]      | 1000  |     3 | schemaless   | coffeescript | \r\n[node-sql][3]   | 2600  |    59 | schema       | javascript   |\r\n[mongo-sql][4]  | 1700  |    49 | schemaless   | javascript   | \r\n[gesundheit][5] | 1600  |    21 | schemaless   | coffeescript | uses Any-DB to wrap the DB driver\r\n[sql-bricks][6] |  1100  |     1 | schemaless   | javascript   |\r\n\r\n[1]: https://github.com/tgriesser/knex\r\n[2]: https://github.com/hiddentao/squel\r\n[3]: https://github.com/brianc/node-sql\r\n[4]: https://github.com/goodybag/mongo-sql\r\n[5]: https://github.com/BetSmartMedia/gesundheit\r\n[6]: https://github.com/CSNW/sql-bricks\r\n\r\n# Related Libraries\r\n\r\n* [sql-bricks-postgres](https://github.com/Suor/sql-bricks-postgres) adds postgres-dialect extensions:\r\n  * `LIMIT` and `OFFSET`\r\n  * `RETURNING`\r\n  * `UPDATE ... FROM`\r\n  * `DELETE ... USING`\r\n  * `FROM VALUES`\r\n* [pg-bricks](https://github.com/Suor/pg-bricks) adds:\r\n  * connections\r\n  * transactions\r\n  * query execution\r\n  * data accessors\r\n* [sql-bricks-sqlite](https://github.com/CSNW/sql-bricks-sqlite) adds sqlite-dialect extensions:\r\n  * `LIMIT` and `OFFSET`\r\n  * `OR REPLACE`, `OR ABORT`, `OR ROLLBACK`, `OR FAIL`\r\n\r\n# Use\r\n\r\nSQLBricks' only dependency is [Underscore.js](http://underscorejs.org/).\r\n\r\nIn the browser:\r\n\r\n```javascript\r\nvar select = SqlBricks.select;\r\n```\r\n\r\nIn node:\r\n\r\n```javascript\r\nvar select = require('sql-bricks').select;\r\n```\r\n\r\nA simple select via `.toString()` and `.toParams()`:\r\n\r\n```javascript\r\nselect().from('person').where({last_name: 'Rubble'}).toString();\r\n// \"SELECT * FROM person WHERE last_name = 'Rubble'\"\r\n\r\nselect().from('person').where({last_name: 'Rubble'}).toParams();\r\n// {\"text\": \"SELECT * FROM person WHERE last_name = $1\", \"values\": [\"Rubble\"]}\r\n```\r\n\r\nWhile `toString()` is slightly easier, `toParams()` is recommended because:\r\n\r\n* It provides [robust protection](https://en.wikipedia.org/wiki/SQL_injection#Parameterized_statements) against SQL injection attacks (toString() just does basic escaping)\r\n* It provides better support for complex data types (objects, arrays, etc, are passed directly to your database driver instead of being \"stringified\")\r\n* It provides more helpful error messages (see https://github.com/Suor/sql-bricks-postgres/issues/10)\r\n\r\n# Examples\r\n\r\nThe [SQLBricks API](http://csnw.github.io/sql-bricks/) is comprehensive, supporting all of SQL-92 for select/insert/update/delete. It is also quite flexible; in most places arguments can be passed in a variety of ways (arrays, objects, separate arguments, etc). That said, here are some of the most common operations:\r\n\r\n```javascript\r\n// convenience variables (for node; for the browser: \"var sql = SqlBricks;\")\r\nvar sql = require('sql-bricks');\r\nvar select = sql.select, insert = sql.insert, update = sql.update;\r\nvar or = sql.or, like = sql.like, lt = sql.lt;\r\n\r\n// WHERE: (.toString() is optional; JS will call it automatically in most cases)\r\nselect().from('person').where({last_name: 'Rubble'}).toString();\r\n// SELECT * FROM person WHERE last_name = 'Rubble'\r\n\r\n// JOINs:\r\nselect().from('person').join('address').on({'person.addr_id': 'address.id'});\r\n// SELECT * FROM person INNER JOIN address ON person.addr_id = address.id\r\n\r\n// Nested WHERE criteria:\r\nselect('*').from('person').where(or(like('last_name', 'Flint%'), {'first_name': 'Fred'}));\r\n// SELECT * FROM person WHERE last_name LIKE 'Flint%' OR first_name = 'Fred'\r\n\r\n// GROUP BY / HAVING\r\nselect('city', 'max(temp_lo)').from('weather')\r\n  .groupBy('city').having(lt('max(temp_lo)', 40))\r\n// SELECT city, max(temp_lo) FROM weather\r\n// GROUP BY city HAVING max(temp_lo) < 40\r\n\r\n// INSERT\r\ninsert('person', {'first_name': 'Fred', 'last_name': 'Flintstone'});\r\n// INSERT INTO person (first_name, last_name) VALUES ('Fred', 'Flintstone')\r\n\r\n// UPDATE\r\nupdate('person', {'first_name': 'Fred', 'last_name': 'Flintstone'});\r\n// UPDATE person SET first_name = 'Fred', last_name = 'Flintstone'\r\n\r\n\r\n// Parameterized SQL\r\nupdate('person', {'first_name': 'Fred'}).where({'last_name': 'Flintstone'}).toParams();\r\n// {\"text\": \"UPDATE person SET first_name = $1 WHERE last_name = $2\", \"values\": [\"Fred\", \"Flintstone\"]}\r\n\r\n// SQLite-style params\r\nupdate('person', {'first_name': 'Fred'}).where({'last_name': 'Flintstone'}).toParams({placeholder: '?%d'});\r\n// {\"text\": \"UPDATE person SET first_name = ?1 WHERE last_name = ?2\", \"values\": [\"Fred\", \"Flintstone\"]}\r\n\r\n// MySQL-style params\r\nupdate('person', {'first_name': 'Fred'}).where({'last_name': 'Flintstone'}).toParams({placeholder: '?'});\r\n// {\"text\": \"UPDATE person SET first_name = ? WHERE last_name = ?\", \"values\": [\"Fred\", \"Flintstone\"]}\r\n```\r\n\r\nDocumentation: http://csnw.github.io/sql-bricks\r\n\r\nLicense: [MIT](LICENSE.md)\r\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/CSNW/sql-bricks.git"
  },
  "scripts": {
    "prepublish": "node tests/gen-tests.js",
    "test": "mocha tests/tests.js tests/doctests.js && mocha tests/tests.js tests/doctests.js --empty-extension"
  },
  "testling": {
    "html": "browser-tests.html",
    "browsers": [
      "chrome/29.0",
      "iexplore/8.0",
      "iexplore/9.0",
      "iexplore/10.0",
      "firefox/4.0",
      "firefox/6.0",
      "firefox/24.0",
      "safari/6.0",
      "iphone/6.0",
      "ipad/6.0",
      "android-browser/4.2"
    ]
  },
  "version": "1.5.1"
}
